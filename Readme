### **1\. main 메서드 이해하기**

-    클래스를 실행하려면 main 메서드를 작성해야한다
-   시작과 끝을 관리하는 것 = main 메서드(메서드는 함수와 동일한 개념)
-   자바는 모든것이 클래스 기반이므로 자바에서 사용하는 함수는 모드 메서드이다

```
public class HelloWorld {
	public static void main(String[] args) {
		System.out.println("Hello World!");
	}
}
```

-   **public** : 메서드의 **접근 제어자**로, **누구나 이 메서드에 접근할 수 있다**는 의미
-   **static** : 메서드에 static이 지정되어 있으면 이 메서드는 **인스턴스를 생성하지 않아도 실행할 수 있다는 것을 의미**
-   **void** : 메서드의 **리턴값이 없음**을 의미(void = '텅빈')
-   **String\[\]** : 문자열을 나타내는 **자바의 자료형**(\[\]은 값이 여러 개로 이루어진 배열이라는 것을 의미)
-   args: String\[\] 자료형의 변수명
-   **System.out.println** : **표준 출력으로 데이터를 보내는 자바의 내장 메서드**로 문자열을 화면에 출력

### **2\. 자바 코드의 구조 살펴보기**

```
/* 클래스 블록 */
public class 클래스명 {

    /* 메서드 블록 */
    [public|private|protected] [static] (리턴자료형|void) 메서드명1(입력자료형 매개변수, ...) {
        명령문(statement);
        ...
    }

    /* 메서드 블록 */
    [public|private|protected] [static] (리턴자료형|void) 메서드명2(입력자료형 매개변수, ...) {
        명령문(statement);
        ...
    }

    ...
}
```

-   **클래스 블록** : 자바 코드의 가장 바깥쪽 영역 / 클래스명은 사용자 마음대로 지을 수 o / 여러 메서드 블록을 포함

```
public class Sample {
    (... 생략 ...)
}
# 클래스 명 : Sample
# 클래스 블록은 중괄호({})로 둘러싸야 한다
# public은 자바의 접근 제어자로, 어디서든 이 클래스에 접근할 수 있음을 의미
# class는 클래스 블록을 만드는 키워드
```

-   **메서드 블록** : \[public | private | protected\] : 메서드의 접근 제어자 / \[static\] : static 키워드가 붙으면 클래스 메서드가 되어 객체를 만들지 않아도 '클래스명.메서드명' 형태로 호출할 수 있다 / \[void (리턴자료형)\] : 리턴값이 없음을 의미

```
public class Sample {
    public static void main(String[] args) {
        (... 생략 ...)
    }
}
# 메서드 블록은 클래스 블록 안에 있으며 역시 중괄호({})로 영역을 구분한다
# 이 메서드의 이름은 main이다
```

-   **명령문** : 메서드 블록 안에는 명령문이 있음... 컴퓨터에 무언가 일을 시키는 문장

```
public class Sample {
    public static void main(String[] args) {
        System.out.println("Hello java");
    }
}
# 명령문은 반드시 세미콜론(;)을 붙여 문장이 끝났다는 것을 표시해야한다
# 메서드 블록 안에는 명령문이 여러 개 있을 수 있다.
```

### **3\. 변수와 자료형**

-   **변수**(variable) : 값을 넣을 수 있는 빈 상자와 같다고 생각!

```
int a;
String b;
int one;
String two;
# 변수 이름을 지을 때의 3가지 규칙
1. 변수명은 숫자로 시작할 수 없다 ex) int 1st;
2. _와 &이외의 특수 문자는 사용할 수 없다 ex) int a#;
3. int, class, return등의 자바의 키워드는 변수명으로 사용할 수 없다 ex) int class;
```

-   **자료형**(type) : 값에는 어떤 형태가 정해져야 하는데... 이것의 형태를 말함

```
int a; // 변수 a의 자료형은 int(정수)이다 => 1, 10, 25 
String b; // 변수 b의 자료형은 String(문자열)이다 => 'a', 'hello'
```

-   **변수에 값 대입**하기 : 변수 선언 후, 변수에 값을 =(대입 연산자) 사용하여 대입

```
int a;
String b;

a = 1; // int 자료형 변수에 a에 1이라는 값을 대입
b = 'hello java'; // String 자료형 변수 b에 "hello java" 라는 값을 대입

int a = 1;
String b = "hello java";
```

-   **사용자 정의 자료형** : 사용자가 자료형을 직접 만들 수 있다!!

```
class Animal {
}

Animal cat;  // cat 변수의 자료형은 Animal이며, cat 변수엔 Animal 자료형에 해당하는 값만 대입 가능
```

### **4\. 이름 짓는 규칙**

-   **클래스 이름** 짓기

```
# 클래스명은 명사로 한다.
# 클래스명은 대문자로 시작한다.
# 여러 개의 단어를 조합하여 만들 경우 각 단어의 첫 번째 글자는 대문자여야 한다
class Cookie {}
class ChocoCookie {}
```

-   **메서드 이름** 짓기

```
# 메서드명은 동사로 한다.
# 메서드명은 소문자로 시작한다.
# 여러 개의 단어를 조합하여 만들 경우 맨 첫 글자를 제외한 나머지 단어의 첫 글자는 대문자를 써서 구분
run();
runFast();
getBackground();
```

-   **변수 이름** 짓기

```
# 변수 이름은 짧지만 의미가 있어야 함 = 변수명을 보면 사용한 이유를 알 수 있어야 함
# 순서를 의미하고 임시로 쓰이는 정수의 변수명은 i, j, k, m, n을 사용
# 변수명에 _, $를 쓸 수 있지만, 시작 문자로 사용하는 것은 지양
String useName;
float lineWidth;
int i; // 주로 반복문에서 사용
char c; // 주로 반복문에서 사용
```

### **5\. 주석**

-   프로그래머의 의견이나 코드의 설명을 적을 수 있다
-   주석은 프로그램 코드에 삽입하더라도 프로그램을 수행하는 데 전혀 영향을 끼치지 않는다
-   블록 주석과 라인 주석의 두가지 형태가 있다

```
# 블록 주석 : /*로 시작하고 */으로 끝난다.. / 코드에서 블록 단위(클래스, 메서드 등)로 설명할 떄 주로 사용
/*
나는 집에 가고 싶습니다
왜냐면 월요병에 걸렸기 때문입니다
집은 멉니다... 힘듭니다
*/
public class Saffy {
```

```
# 라인 주석 : // 기호를 사용, //가 시작된 곳부터 그 라인의 끝까지 주석, 주석이 한줄일 경우 주로 사용
int age; 	// 동물의 나이
```

-   주석 올바르게 사용하기 : 알만한 내용을 주석 사용하여 지저분하게 만들지 않기, 코드에 엉뚱한 주석문 달려 혼돈을 주지 않게 하기